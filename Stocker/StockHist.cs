// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var stockHist = StockHist.FromJson(jsonString);

namespace Stocker
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class StockHist
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("close")]
        public double Close { get; set; }

        [JsonProperty("high")]
        public double High { get; set; }

        [JsonProperty("low")]
        public double Low { get; set; }

        [JsonProperty("open")]
        public double Open { get; set; }

        [JsonProperty("volume")]
        public long Volume { get; set; }

        [JsonProperty("adjClose")]
        public double AdjClose { get; set; }

        [JsonProperty("adjHigh")]
        public double AdjHigh { get; set; }

        [JsonProperty("adjLow")]
        public double AdjLow { get; set; }

        [JsonProperty("adjOpen")]
        public double AdjOpen { get; set; }

        [JsonProperty("adjVolume")]
        public long AdjVolume { get; set; }

        [JsonProperty("divCash")]
        public long DivCash { get; set; }
        public string Symbol { get; set; }

        [JsonProperty("splitFactor")]
        public long SplitFactor { get; set; }
    }

    public partial class StockHist
    {
        public static List<StockHist> FromJson(string json) => JsonConvert.DeserializeObject<List<StockHist>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<StockHist> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
